---
import { expressiveCodeConfig, profileConfig, siteConfig } from "@/config";
import { AUTO_MODE, BANNER_DEFAULTS, DARK_MODE, DEFAULT_THEME, LIGHT_MODE, PAGE_WIDTH } from "../constants/constants";
import { defaultFavicons } from "../constants/icon";
import type { Favicon } from "../types/config";
import { checkOnHomePage, url } from "../utils/url";

import "@fontsource-variable/exo-2";
import exo2Woff2 from "@fontsource-variable/exo-2/files/exo-2-latin-wght-normal.woff2?url";
import "@fontsource-variable/noto-sans-sc";

import "katex/dist/katex.css";

import "../styles/main.css";

interface Props {
  title?: string;
  description?: string;
  lang?: string;
  setOGTypeArticle?: boolean;
}

let { title, description, lang, setOGTypeArticle } = Astro.props;

const isHomePage = checkOnHomePage(Astro.url.pathname);

// defines global css variables
// why doing this in Layout instead of GlobalStyles: https://github.com/withastro/astro/issues/6728#issuecomment-1502203757
const configHue = siteConfig.themeColor.hue;

const BANNER_HEIGHT = siteConfig.banner?.height ?? BANNER_DEFAULTS.height;
const BANNER_HEIGHT_EXTEND = siteConfig.banner?.extendHeight ?? BANNER_DEFAULTS.extendHeight;

let pageTitle: string;
if (title) {
  pageTitle = `${title} - ${siteConfig.title}`;
} else {
  pageTitle = `${siteConfig.title} - ${siteConfig.subtitle}`;
}

const favicons: Favicon[] = siteConfig.favicon.length > 0 ? siteConfig.favicon : defaultFavicons;

// const siteLang = siteConfig.lang.replace('_', '-')
if (!lang) {
  lang = `${siteConfig.lang}`;
}
const siteLang = lang.replace("_", "-");
---

<html lang={siteLang} class="scroll-auto" data-theme={expressiveCodeConfig.theme}>
  <head>
    <title>{pageTitle}</title>

    <meta charset="UTF-8" />
    <meta name="description" content={description || pageTitle} />
    <meta name="author" content={profileConfig.name} />

    <meta property="og:site_name" content={siteConfig.title} />
    <meta property="og:url" content={Astro.url} />
    <meta property="og:title" content={pageTitle} />
    <meta property="og:description" content={description || pageTitle} />
    {setOGTypeArticle ? <meta property="og:type" content="article" /> : <meta property="og:type" content="website" />}

    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={Astro.url} />
    <meta name="twitter:title" content={pageTitle} />
    <meta name="twitter:description" content={description || pageTitle} />

    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    {
      favicons.map((favicon) => (
        <link
          rel="icon"
          href={favicon.src.startsWith("/") ? url(favicon.src) : favicon.src}
          sizes={favicon.sizes}
          media={favicon.theme && `(prefers-color-scheme: ${favicon.theme})`}
        />
      ))
    }

    <link rel="preload" as="font" type="font/woff2" href={exo2Woff2} crossorigin="anonymous" />

    <!-- Set the theme before the page is rendered to avoid a flash -->
    <script
      is:inline
      define:vars={{
        DEFAULT_THEME,
        LIGHT_MODE,
        DARK_MODE,
        AUTO_MODE,
        PAGE_WIDTH,
        BANNER_HEIGHT,
        BANNER_HEIGHT_EXTEND,
        configHue,
        isHomePage,
      }}
    >
      // Load the theme from local storage
      // This should be done before the page is rendered to avoid a flash of unstyled content
      // So the theme mode can only be stored in <html> element
      const theme = localStorage.getItem("theme") || DEFAULT_THEME;
      switch (theme) {
        case LIGHT_MODE:
          document.documentElement.dataset.siteTheme = LIGHT_MODE;
          break;
        case DARK_MODE:
          document.documentElement.dataset.siteTheme = DARK_MODE;
          break;
        case AUTO_MODE:
          if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
            document.documentElement.dataset.siteTheme = DARK_MODE;
          } else {
            document.documentElement.dataset.siteTheme = LIGHT_MODE;
          }
      }

      // Load the hue from local storage
      const hue = localStorage.getItem("hue") || configHue;
      document.documentElement.style.setProperty("--hue", hue);

      // Set CSS variables from site configuration
      document.documentElement.style.setProperty("--page-width", `${PAGE_WIDTH}rem`);
      document.documentElement.style.setProperty("--banner-height", `${isHomePage ? BANNER_HEIGHT : 100}vh`);
      document.documentElement.style.setProperty(
        "--banner-extended-height",
        `${isHomePage ? BANNER_HEIGHT_EXTEND : 0}vh`,
      );
    </script>

    <slot name="head" />

    <link rel="alternate" type="application/rss+xml" title={profileConfig.name} href={`${Astro.site}rss.xml`} />
  </head>
  <body
    class:list={[
      "min-h-screen bg-(--page-bg) transition text-[14px] md:text-[16px]",
      "selection:bg-(--selection-bg)",
      "hidden",
    ]}
  >
    <!-- No effects for now -->
    <div id="data-container"></div>
    <slot />
  </body>
</html>

<script>
  // Ensure fonts are loaded before displaying the page
  try {
    await Promise.all([document.fonts.load("1em 'Exo 2 Variable"), document.fonts.load("1em 'Noto Sans SC Variable'")]);
    document.body.classList.remove("hidden");
  } catch (error) {
    console.log("Failed to load fonts:", error);
  }
</script>

<script>
  import { siteConfig } from "@/config";
  import { isClickAwayStore, themeStore } from "@store/index";
  import { applyThemeToDocument } from "@utils/client/settings";
  import { checkOnHomePage } from "@utils/url";
  import PhotoSwipeLightbox from "photoswipe/lightbox";
  import { BANNER_DEFAULTS, MAIN_PANEL_OVERLAPS_BANNER_HEIGHT } from "../constants/constants";

  import "photoswipe/style.css";

  let lightbox = createPhotoSwipe();
  const BANNER_HEIGHT = siteConfig.banner?.height ?? BANNER_DEFAULTS.height;
  const BANNER_HEIGHT_EXTEND = siteConfig.banner?.extendHeight ?? BANNER_DEFAULTS.extendHeight;
  const bannerEnabled = siteConfig?.banner?.imgList && siteConfig.banner.imgList.length > 0;

  themeStore.subscribe(applyThemeToDocument);

  themeStore.subscribe((newTheme) => {
    const giscus = document.getElementById("giscus-comments");
    if (giscus) {
      switch (newTheme) {
        case "auto":
          giscus.setAttribute("theme", "preferred_color_scheme");
          break;
        case "light":
        case "dark":
          giscus.setAttribute("theme", newTheme);
          break;
        default:
          giscus.setAttribute("theme", "preferred_color_scheme");
          break;
      }
    }
  });

  function setupSwupHooks() {
    const swup = window.swup;

    swup.hooks.on(
      "content:replace",
      () => {
        lightbox?.destroy?.();
      },
      { before: true },
    );

    swup.hooks.on("page:view", (visit) => {
      lightbox = createPhotoSwipe();
      const isHomePage = checkOnHomePage(visit.to.url);

      // Because those elements are not swapped by swup, we need to set style them manually
      document.documentElement.style.setProperty(
        "--banner-extended-height",
        `${isHomePage ? BANNER_HEIGHT_EXTEND : 0}vh`,
      );
      document.documentElement.style.setProperty("--banner-height", `${isHomePage ? BANNER_HEIGHT : 100}vh`);

      const banner = document.getElementById("banner-wrapper");
      if (banner && bannerEnabled) {
        if (isHomePage) {
          banner.classList.add("absolute");
          banner.classList.remove("sticky");
        } else {
          banner.classList.add("sticky");
          banner.classList.remove("absolute");
        }
      }

      const bannerLocator = document.getElementById("banner-locator");
      if (bannerLocator) {
        if (isHomePage) {
          bannerLocator.classList.add("md:opacity-100");
        } else {
          bannerLocator.classList.remove("md:opacity-100");
        }
      }
    });
  }

  function setClickOutsideToClose(panel: string, ignores: string[]) {
    document.addEventListener("click", (event) => {
      let panelDom = document.getElementById(panel);
      let tDom = event.target;
      if (!(tDom instanceof Node)) return; // Ensure the event target is an HTML Node
      for (let ig of ignores) {
        let ie = document.getElementById(ig);
        if (ie == tDom || ie?.contains(tDom)) {
          return;
        }
      }
      panelDom!.classList.add("float-panel-closed");
      isClickAwayStore.set(panel);
    });
  }

  // function initCustomScrollbar() {
  //   const katexElements = document.querySelectorAll(".katex-display") as NodeListOf<HTMLElement>;

  //   const katexObserverOptions = {
  //     root: null,
  //     rootMargin: "100px",
  //     threshold: 0.1,
  //   };

  //   const processKatexElement = (element: HTMLElement) => {
  //     if (!element.parentNode) return;
  //     if (element.hasAttribute("data-scrollbar-initialized")) return;

  //     const container = document.createElement("div");
  //     container.className = "katex-display-container";
  //     container.setAttribute("aria-label", "scrollable container for formulas");

  //     element.parentNode.insertBefore(container, element);
  //     container.appendChild(element);

  //     OverlayScrollbars(container, {
  //       scrollbars: {
  //         theme: "scrollbar-base scrollbar-auto",
  //         autoHide: "leave",
  //         autoHideDelay: 500,
  //         autoHideSuspend: false,
  //       },
  //     });

  //     element.setAttribute("data-scrollbar-initialized", "true");
  //   };

  //   const katexObserver = new IntersectionObserver((entries, observer) => {
  //     entries.forEach((entry) => {
  //       if (entry.isIntersecting) {
  //         processKatexElement(entry.target as HTMLElement);
  //         observer.unobserve(entry.target);
  //       }
  //     });
  //   }, katexObserverOptions);

  //   katexElements.forEach((element) => {
  //     katexObserver.observe(element);
  //   });
  // }

  function createPhotoSwipe() {
    const lightbox = new PhotoSwipeLightbox({
      gallery: ".custom-md img, #post-cover img",
      pswpModule: () => import("photoswipe"),
      closeSVG:
        '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"/></svg>',
      zoomSVG:
        '<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#ffffff"><path d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"/></svg>',
      padding: { top: 20, bottom: 20, left: 20, right: 20 },
      wheelToZoom: true,
      arrowPrev: false,
      arrowNext: false,
      imageClickAction: "close",
      tapAction: "close",
      doubleTapAction: "zoom",
    });

    lightbox.addFilter("domItemData", (itemData, element) => {
      if (element instanceof HTMLImageElement) {
        itemData.src = element.src;

        itemData.w = Number(element.naturalWidth || window.innerWidth);
        itemData.h = Number(element.naturalHeight || window.innerHeight);

        itemData.msrc = element.src;
      }

      return itemData;
    });

    lightbox.init();
    return lightbox;
  }

  setClickOutsideToClose("display-setting", ["display-setting", "display-settings-switch"]);
  setClickOutsideToClose("nav-menu-panel", ["nav-menu-panel", "nav-menu-switch"]);
  setClickOutsideToClose("search-panel", ["search-panel", "search-bar", "search-switch"]);

  if (window.swup) {
    setupSwupHooks();
  } else {
    document.addEventListener("swup:enable", setupSwupHooks, { once: true });
  }

  const backToTopBtn = document.getElementById("back-to-top-btn");
  const toc = document.getElementById("toc-inner-wrapper");
  const header = document.querySelector("header");

  function scrollFunction(_evt: Event) {
    const bannerHeight = window.innerHeight * (BANNER_HEIGHT_EXTEND / 100);

    if (backToTopBtn) {
      if (document.body.scrollTop > 0 || document.documentElement.scrollTop > 0) {
        backToTopBtn.classList.remove("hide");
      } else {
        backToTopBtn.classList.add("hide");
      }
    }

    if (toc) {
      if (document.body.scrollTop > bannerHeight || document.documentElement.scrollTop > bannerHeight) {
        toc.classList.remove("toc-hide");
      } else {
        toc.classList.add("toc-hide");
      }
    }

    if (header) {
      // TODO: Need refactor
      const NAVBAR_HEIGHT = 72;
      const MAIN_PANEL_EXCESS_HEIGHT = MAIN_PANEL_OVERLAPS_BANNER_HEIGHT * 16; // The height the main panel overlaps the banner

      let threshold = window.innerHeight * (BANNER_HEIGHT_EXTEND / 100) - NAVBAR_HEIGHT - MAIN_PANEL_EXCESS_HEIGHT - 16;
      if (document.body.scrollTop >= threshold || document.documentElement.scrollTop >= threshold) {
        header.classList.add("navbar-hidden");
      } else {
        header.classList.remove("navbar-hidden");
      }
    }
  }

  window.addEventListener("scroll", scrollFunction);
</script>
